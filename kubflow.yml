---
- name: Installation de Kubeflow sur cluster Kubernetes
  hosts: localhost
  become: yes
  gather_facts: no

  vars:
    kubeflow_version: "v1.7.0"
    workdir: "/opt/kubeflow-install"
    kubeconfig_path: "/root/.kube/config"

  tasks:

    - name: V√©rifier que le cluster Kubernetes est op√©rationnel
      shell: kubectl get nodes
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: cluster_status
      failed_when: cluster_status.rc != 0

    - name: Afficher l'√©tat du cluster
      debug:
        var: cluster_status.stdout_lines

    - name: Installer les d√©pendances n√©cessaires
      apt:
        name:
          - git
          - curl
          - wget
        state: present
        update_cache: yes

    - name: Cr√©er le r√©pertoire de travail
      file:
        path: "{{ workdir }}"
        state: directory
        mode: '0755'

    - name: Nettoyer ancienne installation Kubeflow
      shell: |
        kubectl delete namespace kubeflow --ignore-not-found=true
        kubectl delete namespace istio-system --ignore-not-found=true
        kubectl delete namespace cert-manager --ignore-not-found=true
        kubectl delete namespace knative-eventing --ignore-not-found=true
        kubectl delete namespace knative-serving --ignore-not-found=true
        kubectl delete namespace auth --ignore-not-found=true
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: yes

    - name: Attendre la suppression des namespaces
      shell: |
        while kubectl get namespace kubeflow 2>/dev/null; do
          echo "Attente suppression namespace kubeflow..."
          sleep 5
        done
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: yes

    - name: V√©rifier si kustomize est install√©
      command: which kustomize
      register: kustomize_check
      ignore_errors: yes

    - name: Installer kustomize
      shell: |
        cd /tmp
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        chmod +x kustomize
        mv kustomize /usr/local/bin/
      when: kustomize_check.rc != 0

    - name: Cloner le d√©p√¥t Kubeflow manifests
      git:
        repo: "https://github.com/kubeflow/manifests.git"
        dest: "{{ workdir }}/manifests"
        version: "{{ kubeflow_version }}"
        force: yes

    - name: Installer cert-manager
      shell: |
        cd {{ workdir }}/manifests
        kustomize build common/cert-manager/cert-manager/base | kubectl apply -f -
        kubectl wait --for condition=established --timeout=60s crd/certificates.cert-manager.io
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: cert_manager_result
      until: cert_manager_result.rc == 0
      retries: 3
      delay: 30

    - name: Attendre que cert-manager soit pr√™t
      shell: kubectl wait --for=condition=Ready pod -l app=cert-manager -n cert-manager --timeout=300s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer Istio
      shell: |
        cd {{ workdir }}/manifests
        kustomize build common/istio-1-16/istio-crds/base | kubectl apply -f -
        kustomize build common/istio-1-16/istio-namespace/base | kubectl apply -f -
        kustomize build common/istio-1-16/istio-install/base | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: yes

    - name: Attendre qu'Istio soit pr√™t
      shell: kubectl wait --for=condition=Ready pod -l app=istiod -n istio-system --timeout=600s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer Dex (Auth)
      shell: |
        cd {{ workdir }}/manifests
        kustomize build common/dex/overlays/istio | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer OIDC AuthService
      shell: |
        cd {{ workdir }}/manifests
        kustomize build common/oidc-authservice/base | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer Knative
      shell: |
        cd {{ workdir }}/manifests
        kustomize build common/knative/knative-serving/overlays/gateways | kubectl apply -f -
        kustomize build common/knative/knative-eventing/base | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer les ressources Kubeflow de base
      shell: |
        cd {{ workdir }}/manifests
        kustomize build common/kubeflow-namespace/base | kubectl apply -f -
        kustomize build common/kubeflow-roles/base | kubectl apply -f -
        kustomize build common/istio-1-16/kubeflow-istio-resources/base | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer Central Dashboard
      shell: |
        cd {{ workdir }}/manifests
        kustomize build apps/centraldashboard/upstream/overlays/kserve | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer Admission Webhook
      shell: |
        cd {{ workdir }}/manifests
        kustomize build apps/admission-webhook/upstream/overlays/cert-manager | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer Notebook Controller et Jupyter Web App
      shell: |
        cd {{ workdir }}/manifests
        kustomize build apps/jupyter/notebook-controller/upstream/overlays/kubeflow | kubectl apply -f -
        kustomize build apps/jupyter/jupyter-web-app/upstream/overlays/istio | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer Profiles + KFAM
      shell: |
        cd {{ workdir }}/manifests
        kustomize build apps/profiles/upstream/overlays/kubeflow | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer Volumes Web App
      shell: |
        cd {{ workdir }}/manifests
        kustomize build apps/volumes-web-app/upstream/overlays/istio | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer Tensorboard
      shell: |
        cd {{ workdir }}/manifests
        kustomize build apps/tensorboard/tensorboard-controller/upstream/overlays/kubeflow | kubectl apply -f -
        kustomize build apps/tensorboard/tensorboards-web-app/upstream/overlays/istio | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer Training Operator
      shell: |
        cd {{ workdir }}/manifests
        kustomize build apps/training-operator/upstream/overlays/kubeflow | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer User Namespace
      shell: |
        cd {{ workdir }}/manifests
        kustomize build common/user-namespace/base | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Attendre que les pods Kubeflow soient pr√™ts
      shell: |
        echo "Attente du d√©ploiement des composants..."
        sleep 60
        kubectl wait --for=condition=Ready pod --all -n kubeflow --timeout=600s || echo "Timeout kubeflow"
        kubectl wait --for=condition=Ready pod --all -n istio-system --timeout=300s || echo "Timeout istio"
        kubectl wait --for=condition=Ready pod --all -n cert-manager --timeout=300s || echo "Timeout cert-manager"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: yes

    - name: Configurer l'acc√®s externe (NodePort)
      shell: kubectl patch service istio-ingressgateway -n istio-system -p '{"spec":{"type":"NodePort"}}'
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Cr√©er un utilisateur par d√©faut
      shell: |
        kubectl apply -f - <<EOF
        apiVersion: kubeflow.org/v1beta1
        kind: Profile
        metadata:
          name: kubeflow-user-example-com
        spec:
          owner:
            kind: User
            name: user@example.com
        EOF
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: yes

    - name: Obtenir l'URL d'acc√®s Kubeflow
      shell: |
        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        NODE_PORT=$(kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
        echo "http://${NODE_IP}:${NODE_PORT}"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: kubeflow_url

    - name: V√©rifier l'√©tat des pods Kubeflow
      shell: kubectl get pods -n kubeflow
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: kubeflow_pods

    - name: V√©rifier l'√©tat des pods Istio
      shell: kubectl get pods -n istio-system
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: istio_pods

    - name: Afficher l'√©tat des pods Kubeflow
      debug:
        var: kubeflow_pods.stdout_lines

    - name: Afficher l'√©tat des pods Istio
      debug:
        var: istio_pods.stdout_lines

    - name: Afficher les informations de connexion
      debug:
        msg: |
          ============================================
          üéâ INSTALLATION KUBEFLOW TERMIN√âE !
          ============================================
          URL d'acc√®s : {{ kubeflow_url.stdout }}
          Email : user@example.com
          Mot de passe : 12341234
          ============================================
          Note: L'installation peut prendre quelques minutes
          pour √™tre compl√®tement op√©rationnelle.
          ============================================

    - name: Sauvegarder les informations d'acc√®s
      copy:
        content: |
          # Kubeflow Access Information
          URL: {{ kubeflow_url.stdout }}
          Email: user@example.com
          Password: 12341234
          
          # Commandes utiles pour v√©rifier l'installation
          kubectl get pods -n kubeflow
          kubectl get pods -n istio-system
          kubectl get svc -n istio-system
          
          # Commandes de d√©pannage
          kubectl describe pods -n kubeflow
          kubectl logs -n kubeflow -l app=centraldashboard
          kubectl get events --all-namespaces --sort-by='.lastTimestamp'
        dest: "{{ workdir }}/kubeflow-access-info.txt"
        mode: '0644'

    - name: Cr√©er script de v√©rification
      copy:
        content: |
          #!/bin/bash
          echo "=== √âtat du cluster ==="
          kubectl get nodes
          echo ""
          echo "=== Pods Kubeflow ==="
          kubectl get pods -n kubeflow
          echo ""
          echo "=== Pods Istio ==="
          kubectl get pods -n istio-system
          echo ""
          echo "=== Services Istio ==="
          kubectl get svc -n istio-system
          echo ""
          echo "=== URL Kubeflow ==="
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          NODE_PORT=$(kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
          echo "http://${NODE_IP}:${NODE_PORT}"
        dest: "{{ workdir }}/check-kubeflow.sh"
        mode: '0755'
