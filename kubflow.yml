---
- name: Installation de Rook-Ceph et Kubeflow sur cluster Kubernetes
  hosts: localhost
  become: yes
  gather_facts: no

  vars:
    rook_version: "v1.12.9"
    kubeflow_version: "v1.7.0"
    kubeflow_manifest_repo: "https://github.com/kubeflow/manifests.git"
    kubeconfig_path: "/root/.kube/config"
    workdir: "/opt/kubeflow-deployment"

  tasks:

    - name: Vérifier que le cluster Kubernetes est prêt
      shell: kubectl get nodes
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: cluster_status
      failed_when: cluster_status.rc != 0

    - name: Afficher l'état du cluster
      debug:
        var: cluster_status.stdout_lines

    - name: Installer git et curl
      apt:
        name: 
          - git
          - curl
        state: present
      update_cache: yes

    - name: Nettoyer ancienne installation Kubeflow (manifests)
      file:
        path: "{{ workdir }}/manifests"
        state: absent

    - name: Supprimer anciens fichiers Rook-Ceph
      file:
        path: "{{ workdir }}"
        state: absent

    # Suppression propre des CRDs avec vérification d'existence
    - name: Vérifier si les CRDs Kubeflow existent
      shell: kubectl get crd | grep -i kubeflow || true
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: kubeflow_crds_exist
      ignore_errors: yes

    - name: Supprimer CRDs Kubeflow si existants
      shell: |
        kubectl delete namespace kubeflow --ignore-not-found=true
        kubectl delete namespace istio-system --ignore-not-found=true
        kubectl delete namespace cert-manager --ignore-not-found=true
        kubectl delete namespace knative-eventing --ignore-not-found=true
        kubectl delete namespace knative-serving --ignore-not-found=true
        kubectl delete namespace auth --ignore-not-found=true
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      when: kubeflow_crds_exist.stdout != ""
      ignore_errors: yes

    - name: Supprimer namespace et ressources Rook-Ceph si existants
      shell: |
        kubectl delete namespace rook-ceph --ignore-not-found=true
        kubectl get crd | grep rook | awk '{print $1}' | xargs -r kubectl delete crd --ignore-not-found=true
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: yes

    - name: Attendre la suppression complète des namespaces
      shell: |
        while kubectl get namespace rook-ceph 2>/dev/null; do
          echo "Attente suppression namespace rook-ceph..."
          sleep 5
        done
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: yes

    - name: Créer répertoire de travail
      file:
        path: "{{ workdir }}"
        state: directory
        mode: '0755'

    # --- Installation Rook-Ceph ---

    - name: Créer namespace rook-ceph
      kubernetes.core.k8s:
        name: rook-ceph
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Télécharger manifests Rook-Ceph
      get_url:
        url: "https://raw.githubusercontent.com/rook/rook/{{ rook_version }}/deploy/examples/{{ item }}"
        dest: "{{ workdir }}/{{ item }}"
        mode: '0644'
        timeout: 30
      loop:
        - crds.yaml
        - common.yaml
        - operator.yaml
      retries: 3
      delay: 5

    - name: Appliquer CRDs Rook
      shell: kubectl apply -f {{ workdir }}/crds.yaml
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: apply_crds
      until: apply_crds.rc == 0
      retries: 3
      delay: 10

    - name: Attendre que les CRDs soient établis
      shell: kubectl wait --for condition=established --timeout=60s crd/cephclusters.ceph.rook.io
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Appliquer configuration commune Rook
      shell: kubectl apply -f {{ workdir }}/common.yaml
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Déployer opérateur Rook
      shell: kubectl apply -f {{ workdir }}/operator.yaml
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Attendre que l'opérateur Rook soit prêt
      shell: kubectl wait --for=condition=Ready pod -l app=rook-ceph-operator -n rook-ceph --timeout=300s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: operator_ready
      until: operator_ready.rc == 0
      retries: 3
      delay: 30

    - name: Télécharger configuration cluster Ceph
      get_url:
        url: "https://raw.githubusercontent.com/rook/rook/{{ rook_version }}/deploy/examples/cluster.yaml"
        dest: "{{ workdir }}/cluster.yaml"
        mode: '0644'
        timeout: 30

    - name: Modifier allowUnsupported dans cluster.yaml
      replace:
        path: "{{ workdir }}/cluster.yaml"
        regexp: 'allowUnsupported: false'
        replace: 'allowUnsupported: true'

    - name: Configurer les MONs pour environnement de test
      replace:
        path: "{{ workdir }}/cluster.yaml"
        regexp: '(\s+)count: 3'
        replace: '\1count: 1\n\1allowMultiplePerNode: true'

    - name: Configurer les OSDs pour environnement de test
      replace:
        path: "{{ workdir }}/cluster.yaml"
        regexp: '(\s+)useAllNodes: true'
        replace: '\1useAllNodes: true\n\1useAllDevices: false\n\1config:\n\1  osdsPerDevice: "1"'

    - name: Déployer cluster Ceph
      shell: kubectl apply -f {{ workdir }}/cluster.yaml
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Attendre le déploiement des MONs Ceph
      shell: |
        for i in {1..20}; do
          if kubectl get pods -n rook-ceph | grep rook-ceph-mon | grep Running; then
            echo "MONs déployés avec succès"
            exit 0
          fi
          echo "Attente des MONs... (tentative $i/20)"
          sleep 30
        done
        echo "Timeout: Les MONs ne sont pas prêts après 10 minutes"
        kubectl get pods -n rook-ceph
        exit 1
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Télécharger configuration StorageClass Ceph RBD
      get_url:
        url: "https://raw.githubusercontent.com/rook/rook/{{ rook_version }}/deploy/examples/csi/rbd/storageclass.yaml"
        dest: "{{ workdir }}/storageclass.yaml"
        mode: '0644'
        timeout: 30

    - name: Créer StorageClass Ceph RBD
      shell: kubectl apply -f {{ workdir }}/storageclass.yaml
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Attendre que la StorageClass soit disponible
      shell: kubectl get storageclass rook-ceph-block
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: sc_ready
      until: sc_ready.rc == 0
      retries: 5
      delay: 10

    - name: Définir StorageClass par défaut
      shell: >
        kubectl patch storageclass rook-ceph-block -p
        '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    # --- Installation Kustomize ---

    - name: Vérifier si kustomize est déjà installé
      command: which kustomize
      register: kustomize_installed
      ignore_errors: yes

    - name: Installer kustomize si nécessaire
      shell: |
        cd /tmp
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        chmod +x kustomize
        mv kustomize /usr/local/bin/
      when: kustomize_installed.rc != 0

    # --- Installation Kubeflow ---

    - name: Cloner dépôt Kubeflow manifests
      git:
        repo: "{{ kubeflow_manifest_repo }}"
        dest: "{{ workdir }}/manifests"
        version: "{{ kubeflow_version }}"
        force: yes
        depth: 1  # Clone shallow pour économiser du temps

    - name: Installer les CRDs Kubeflow en premier
      shell: |
        cd {{ workdir }}/manifests
        kustomize build common/cert-manager/cert-manager/base | kubectl apply -f -
        kubectl wait --for condition=established --timeout=60s crd/certificates.cert-manager.io
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: cert_manager_install
      until: cert_manager_install.rc == 0
      retries: 3
      delay: 30

    - name: Attendre que cert-manager soit prêt
      shell: kubectl wait --for=condition=Ready pod -l app=cert-manager -n cert-manager --timeout=300s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer Istio
      shell: |
        cd {{ workdir }}/manifests
        kustomize build common/istio-1-16/istio-crds/base | kubectl apply -f -
        kustomize build common/istio-1-16/istio-namespace/base | kubectl apply -f -
        kustomize build common/istio-1-16/istio-install/base | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Attendre qu'Istio soit prêt
      shell: kubectl wait --for=condition=Ready pod -l app=istiod -n istio-system --timeout=600s
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Installer les composants Kubeflow par étapes
      shell: |
        cd {{ workdir }}/manifests
        
        # Dex (Auth)
        kustomize build common/dex/overlays/istio | kubectl apply -f -
        
        # OIDC AuthService
        kustomize build common/oidc-authservice/base | kubectl apply -f -
        
        # Knative
        kustomize build common/knative/knative-serving/overlays/gateways | kubectl apply -f -
        kustomize build common/knative/knative-eventing/base | kubectl apply -f -
        
        # Kubeflow Namespace
        kustomize build common/kubeflow-namespace/base | kubectl apply -f -
        
        # Kubeflow Roles
        kustomize build common/kubeflow-roles/base | kubectl apply -f -
        
        # Kubeflow Istio Resources
        kustomize build common/istio-1-16/kubeflow-istio-resources/base | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: kubeflow_base_install
      until: kubeflow_base_install.rc == 0
      retries: 2
      delay: 60

    - name: Installer les applications Kubeflow
      shell: |
        cd {{ workdir }}/manifests
        
        # Central Dashboard
        kustomize build apps/centraldashboard/upstream/overlays/kserve | kubectl apply -f -
        
        # Admission Webhook
        kustomize build apps/admission-webhook/upstream/overlays/cert-manager | kubectl apply -f -
        
        # Notebook Controller
        kustomize build apps/jupyter/notebook-controller/upstream/overlays/kubeflow | kubectl apply -f -
        
        # Jupyter Web App
        kustomize build apps/jupyter/jupyter-web-app/upstream/overlays/istio | kubectl apply -f -
        
        # Profiles + KFAM
        kustomize build apps/profiles-kfam/upstream/overlays/kubeflow | kubectl apply -f -
        
        # Volumes Web App
        kustomize build apps/volumes-web-app/upstream/overlays/istio | kubectl apply -f -
        
        # Tensorboard
        kustomize build apps/tensorboard/tensorboard-controller/upstream/overlays/kubeflow | kubectl apply -f -
        kustomize build apps/tensorboard/tensorboards-web-app/upstream/overlays/istio | kubectl apply -f -
        
        # Training Operator
        kustomize build apps/training-operator/upstream/overlays/kubeflow | kubectl apply -f -
        
        # User Namespace
        kustomize build common/user-namespace/base | kubectl apply -f -
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: yes

    - name: Attendre le déploiement progressif des composants
      shell: |
        echo "Attente du déploiement des composants Kubeflow..."
        for namespace in kubeflow istio-system cert-manager auth knative-serving knative-eventing; do
          echo "Vérification du namespace: $namespace"
          kubectl wait --for=condition=Ready pod --all -n $namespace --timeout=600s || echo "Timeout pour $namespace, continuing..."
        done
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: yes

    - name: Configurer accès externe Kubeflow (NodePort)
      shell: kubectl patch service istio-ingressgateway -n istio-system -p '{"spec":{"type":"NodePort"}}'
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Obtenir URL d'accès Kubeflow
      shell: |
        NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
        NODE_PORT=$(kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
        echo "http://${NODE_IP}:${NODE_PORT}"
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: kubeflow_url

    - name: Créer Profile utilisateur par défaut
      shell: |
        kubectl apply -f - <<EOF
        apiVersion: kubeflow.org/v1beta1
        kind: Profile
        metadata:
          name: kubeflow-user-example-com
        spec:
          owner:
            kind: User
            name: user@example.com
        EOF
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      ignore_errors: yes

    # --- Vérifications et rapports ---

    - name: Vérifier état Rook-Ceph
      shell: kubectl get pods -n rook-ceph
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: rook_status

    - name: Vérifier état Kubeflow
      shell: kubectl get pods -n kubeflow
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: kubeflow_status

    - name: Vérifier StorageClasses
      shell: kubectl get storageclass
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      register: storage_status

    - name: Afficher état Rook-Ceph
      debug:
        var: rook_status.stdout_lines

    - name: Afficher état Kubeflow
      debug:
        var: kubeflow_status.stdout_lines

    - name: Afficher StorageClasses
      debug:
        var: storage_status.stdout_lines

    - name: Afficher informations de connexion
      debug:
        msg: |
          ============================================
          🎉 INSTALLATION TERMINÉE !
          ============================================
          Kubeflow URL : {{ kubeflow_url.stdout }}
          Email : user@example.com
          Mot de passe : kubeflow123
          
          Notes importantes :
          - L'installation peut prendre du temps pour être complètement opérationnelle
          - Vérifiez l'état des pods avec: kubectl get pods --all-namespaces
          - Pour Kubeflow, le mot de passe par défaut est : kubeflow123
          ============================================

    - name: Sauvegarder les informations d'accès
      copy:
        content: |
          # Kubeflow Access Info
          URL: {{ kubeflow_url.stdout }}
          Email: user@example.com
          Password: kubeflow123
          
          # Commandes de vérification utiles
          kubectl get pods -n rook-ceph
          kubectl get pods -n kubeflow
          kubectl get pods -n istio-system
          kubectl get storageclass
          
          # Commandes de dépannage
          kubectl describe pods -n kubeflow
          kubectl logs -n kubeflow deployment/centraldashboard
          kubectl get events --all-namespaces --sort-by='.lastTimestamp'
          
          # Accès aux logs Rook-Ceph
          kubectl logs -n rook-ceph deployment/rook-ceph-operator
        dest: "{{ workdir }}/kubeflow-access-info.txt"
        mode: '0644'
