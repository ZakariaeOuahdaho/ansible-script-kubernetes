---
- name: Installation Kubeflow avec MicroK8s (Simple et efficace)
  hosts: localhost
  become: yes
  gather_facts: no

  tasks:

    - name: V√©rifier l'√©tat actuel
      shell: |
        echo "=== Syst√®me actuel ==="
        free -h
        df -h
        ip addr show | grep inet
      register: system_info

    - name: Afficher infos syst√®me
      debug:
        var: system_info.stdout_lines

    - name: Arr√™ter le cluster Kubernetes existant (pour √©viter les conflits)
      shell: |
        systemctl stop kubelet || true
        systemctl stop containerd || true
        # Lib√©rer les ports
        fuser -k 6443/tcp || true
        fuser -k 8080/tcp || true
        fuser -k 16443/tcp || true
      ignore_errors: yes

    - name: Installer snapd si n√©cessaire
      apt:
        name: snapd
        state: present
        update_cache: yes

    - name: Installer MicroK8s
      snap:
        name: microk8s
        classic: yes
        state: present

    - name: Ajouter l'utilisateur au groupe microk8s
      user:
        name: "{{ ansible_user | default('root') }}"
        groups: microk8s
        append: yes

    - name: Ajouter l'utilisateur zk au groupe microk8s
      user:
        name: zk
        groups: microk8s
        append: yes
      ignore_errors: yes

    - name: Attendre que MicroK8s soit pr√™t
      shell: microk8s status --wait-ready
      timeout: 300

    - name: Activer les addons de base
      shell: |
        microk8s enable dns
        microk8s enable storage
        microk8s enable ingress
      register: addons_basic

    - name: Afficher r√©sultat addons de base
      debug:
        var: addons_basic.stdout_lines

    - name: Attendre stabilisation
      pause:
        seconds: 60

    - name: Installer Kubeflow via MicroK8s
      shell: |
        echo "Installation de Kubeflow..."
        microk8s enable kubeflow
      register: kubeflow_install
      timeout: 1800  # 30 minutes max

    - name: Afficher r√©sultat installation Kubeflow
      debug:
        var: kubeflow_install.stdout_lines

    - name: Attendre que tous les pods soient pr√™ts
      shell: |
        echo "Attente que Kubeflow soit compl√®tement d√©ploy√©..."
        sleep 120
        microk8s kubectl wait --for=condition=Ready pod --all -n kubeflow --timeout=600s || echo "Certains pods d√©marrent encore"
      ignore_errors: yes

    - name: Configurer l'acc√®s externe
      shell: |
        # Obtenir le service istio-ingressgateway
        microk8s kubectl patch service istio-ingressgateway -n istio-system -p '{"spec":{"type":"NodePort"}}' || true
        
        # Alternative: port-forward permanent en arri√®re-plan
        nohup microk8s kubectl port-forward service/istio-ingressgateway 8080:80 -n istio-system --address=0.0.0.0 > /var/log/kubeflow-port-forward.log 2>&1 &
      ignore_errors: yes

    - name: Cr√©er les alias kubectl pour faciliter l'usage
      copy:
        content: |
          #!/bin/bash
          alias kubectl='microk8s kubectl'
          alias k='microk8s kubectl'
          export KUBECONFIG=/var/snap/microk8s/current/credentials/kubelet.config
        dest: /etc/profile.d/microk8s.sh
        mode: '0644'

    - name: Configurer kubectl pour l'utilisateur zk
      shell: |
        mkdir -p /home/zk/.kube
        microk8s config > /home/zk/.kube/config
        chown -R zk:zk /home/zk/.kube
      ignore_errors: yes

    - name: Obtenir les informations d'acc√®s
      shell: |
        echo "=== INFORMATIONS D'ACC√àS KUBEFLOW ==="
        
        # IP du serveur
        SERVER_IP=$(ip route get 8.8.8.8 | awk '{print $7; exit}')
        echo "IP du serveur: $SERVER_IP"
        
        # Port NodePort si disponible
        NODE_PORT=$(microk8s kubectl get svc istio-ingressgateway -n istio-system -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}' 2>/dev/null || echo "")
        
        if [ ! -z "$NODE_PORT" ]; then
          echo "URL NodePort: http://$SERVER_IP:$NODE_PORT"
        fi
        
        echo "URL Port-Forward: http://$SERVER_IP:8080"
        echo "URL Local: http://localhost:8080"
        
        echo ""
        echo "=== √âTAT DU CLUSTER ==="
        microk8s kubectl get nodes
        echo ""
        echo "=== PODS KUBEFLOW ==="
        microk8s kubectl get pods -n kubeflow | head -10
        echo ""
        echo "=== SERVICES ==="
        microk8s kubectl get svc -n istio-system
        
      register: access_info

    - name: Afficher les informations d'acc√®s
      debug:
        var: access_info.stdout_lines

    - name: Cr√©er un script d'acc√®s rapide
      copy:
        content: |
          #!/bin/bash
          # Script d'acc√®s rapide √† Kubeflow
          
          echo "üöÄ KUBEFLOW ACCESS SCRIPT üöÄ"
          echo "============================="
          
          SERVER_IP=$(ip route get 8.8.8.8 | awk '{print $7; exit}')
          
          echo "Votre serveur: $SERVER_IP"
          echo ""
          echo "Options d'acc√®s:"
          echo "1. Port-forward (recommand√©): http://$SERVER_IP:8080"
          echo "2. Acc√®s local: http://localhost:8080"
          echo ""
          echo "Identifiants par d√©faut:"
          echo "Email: user@example.com"
          echo "Mot de passe: 12341234"
          echo ""
          echo "Commandes utiles:"
          echo "microk8s kubectl get pods -n kubeflow"
          echo "microk8s kubectl get svc -n istio-system"
          echo ""
          echo "Red√©marrer le port-forward si n√©cessaire:"
          echo "pkill -f 'kubectl port-forward'"
          echo "nohup microk8s kubectl port-forward service/istio-ingressgateway 8080:80 -n istio-system --address=0.0.0.0 &"
          echo ""
          echo "============================="
          
          # V√©rifier si le port-forward fonctionne
          if curl -s http://localhost:8080 >/dev/null 2>&1; then
            echo "‚úÖ Kubeflow est accessible sur http://$SERVER_IP:8080"
          else
            echo "‚ö†Ô∏è  Red√©marrage du port-forward..."
            pkill -f 'kubectl port-forward' 2>/dev/null || true
            nohup microk8s kubectl port-forward service/istio-ingressgateway 8080:80 -n istio-system --address=0.0.0.0 > /var/log/kubeflow-port-forward.log 2>&1 &
            sleep 5
            echo "üîÑ Port-forward red√©marr√©"
          fi
        dest: /usr/local/bin/kubeflow-access
        mode: '0755'

    - name: Afficher le r√©sum√© final
      debug:
        msg: |
          ========================================
          üéâ KUBEFLOW INSTALL√â AVEC MICROK8S! üéâ
          ========================================
          
          üåê ACC√àS √Ä L'INTERFACE:
          http://{{ ansible_default_ipv4.address | default('VOTRE_IP') }}:8080
          ou
          http://localhost:8080
          
          üë§ CONNEXION:
          Email: user@example.com
          Mot de passe: 12341234
          
          üîß COMMANDES UTILES:
          /usr/local/bin/kubeflow-access
          microk8s kubectl get pods -n kubeflow
          microk8s status
          
          üìù NOTES:
          - MicroK8s fonctionne ind√©pendamment de votre cluster existant
          - Port-forward automatique sur le port 8080
          - Utilisez 'kubeflow-access' pour v√©rifier l'√©tat
          
          ========================================

    - name: Sauvegarder les informations
      copy:
        content: |
          # Kubeflow avec MicroK8s - Guide d'acc√®s
          
          ## Acc√®s √† l'interface
          URL: http://{{ ansible_default_ipv4.address | default('VOTRE_IP') }}:8080
          URL locale: http://localhost:8080
          
          ## Connexion
          Email: user@example.com
          Mot de passe: 12341234
          
          ## Commandes de gestion
          
          # √âtat du cluster
          microk8s status
          microk8s kubectl get nodes
          
          # Pods Kubeflow
          microk8s kubectl get pods -n kubeflow
          microk8s kubectl get pods -n istio-system
          
          # Services
          microk8s kubectl get svc -n istio-system
          
          # Logs en cas de probl√®me
          microk8s kubectl logs -n kubeflow -l app=ml-pipeline
          
          # Red√©marrer le port-forward si n√©cessaire
          pkill -f 'kubectl port-forward'
          nohup microk8s kubectl port-forward service/istio-ingressgateway 8080:80 -n istio-system --address=0.0.0.0 &
          
          # Script d'acc√®s rapide
          /usr/local/bin/kubeflow-access
          
          ## Installation termin√©e le: $(date)
        dest: ./kubeflow-microk8s-access.txt
        mode: '0644'